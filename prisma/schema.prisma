// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  city        String
  address     String
  admin       User    @relation(fields: [adminId], references: [id], "club_admin")
  adminId     Int     @unique
  members     User[]
}

model User {
  id       Int    @id @default(autoincrement())
  // login info
  email    String @unique
  password String

  role           role      @default(player)
  last_signed_in DateTime?

  // about User
  full_name          String
  nickname           String?
  date_of_birth      DateTime?
  facebook           String?
  instagram          String?
  phone_number       String?
  about_me           String?
  kinball_experience User_kinball_experience?

  settings           Settings?
  reward_system      Reward_system?
  // Posts of which user is the author
  posts              Post[]
  //post whre user toggled to get notified for changes and updates
  posts_notification Post[]          @relation("user-post_notification")
  //events user is registered on
  signed_in_events   UserOnEvent[]
  //Eventy které user pořádá (trenér)
  organising_events  Event[]
  post_comments      Post_comment[]
  post_likes         Post[]          @relation("post_likes")
  post_comment_likes Post_comment[]  @relation("Post_comment_likes")
  // Teams for events which requier teams (tournament)
  teams              Team[]          @relation("users-in-event-teams")
  //profile picture
  profile_picture    Image?          @relation(fields: [imageId], references: [id])
  //images user is tagged in
  images_tagged_in   Image[]         @relation("image_tagged_users")
  // Survey options user picked
  survey_options     Survey_option[] @relation("voted_survey_option")
  // Groups (tags) user is in
  groups             Group[]         @relation("user_in_group")
  imageId            Int?
  // User is sub-admin of a club:
  admin_of_club      Club?           @relation("club_admin")
  // User is in this club:
  club               Club?           @relation(fields: [clubId], references: [id])
  clubId             Int?
}

model Settings {
  userId             Int     @id
  email_notification Boolean @default(false)
  push_notification  Boolean @default(false)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reward_system {
  userId Int  @id
  xp     Int  @default(0)
  level  Int  @default(0)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id                Int             @id @default(autoincrement())
  type              postType
  heading           String
  text              String?
  time_of_creation  DateTime        @default(now())
  author            User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          Int
  groups            Group[]         @relation("post_in_group")
  event             Event?
  images            Image[]
  likes             User[]          @relation("post_likes")
  comments          Post_comment[]
  survey_options    Survey_option[]
  user_notification User[]          @relation("user-post_notification")
}

model Post_comment {
  id               Int      @id @default(autoincrement())
  time_of_creation DateTime @default(now())
  text             String
  author           User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes            User[]   @relation("Post_comment_likes")
  postId           Int
  authorId         Int
}

model Event {
  id               Int           @id @default(autoincrement())
  type             eventType
  price            Float?        @default(0)
  // date and time of the event taking place
  time             DateTime
  // Proper address valid for Google maps
  address          String
  // Short address for a short description of the place (tělocvična Mendelu)
  address_short    String?
  description      String?
  people_limit     Int?
  substitues_limit Int?
  // note for after the event ends, filled by trainer
  note             String?
  // related post, used for users to sign in on the event and read its information
  post             Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  //users registered on the event
  players          UserOnEvent[]
  // organiser of the event, usually trainer for a training
  organiser        User          @relation(fields: [organiserId], references: [id], onDelete: Cascade)
  organiserId      Int
  postId           Int           @unique
  // registered teams for tournament
  teams            Team[]
  // lat and lng for google API (potencially)
  address_lat      String?
  address_lng      String?
  groups           Group[]       @relation("event_in_grup")

  // allow reaction until before
  reaction_deadline DateTime?
}

model UserOnEvent {
  status  UserOnEventStatus @default(going)
  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  event   Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  present Boolean           @default(false)

  @@id([userId, eventId]) // composite primary key
}

model Team {
  id      Int    @id @default(autoincrement())
  name    String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  players User[] @relation("users-in-event-teams")
}

model Album {
  id     Int     @id @default(autoincrement())
  name   String
  images Image[]
}

model Image {
  id         Int    @id @default(autoincrement())
  image_path String @unique
  // user for profile pictures
  user       User[]

  // images in posts
  post         Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int?
  tagged_users User[] @relation("image_tagged_users")
  // images sorted in albums
  album        Album? @relation(fields: [albumId], references: [id])
  albumId      Int?
}

model Survey_option {
  id     Int    @id @default(autoincrement())
  text   String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  votes  User[] @relation("voted_survey_option")
}

model Group {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  color String?
  users User[]  @relation("user_in_group")
  posts Post[]  @relation("post_in_group")
  event Event[] @relation("event_in_grup")
}

enum role {
  admin
  coach
  player
  sub_admin
}

enum postType {
  event
  text
  survey
}

enum eventType {
  trenink
  kurz_pro_mladez
  turnaj
  jednorazova_akce
}

enum UserOnEventStatus {
  going
  not_going
  dont_know
  substitute
}

enum User_kinball_experience {
  beginner
  intermediate
  pro
}
